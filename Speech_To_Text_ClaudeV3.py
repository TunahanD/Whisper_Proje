# =============================
# FILE: main.py (Merkezi CONFIG ile)
# =============================
"""
Terminal tabanlƒ± PTT (F9 ba≈ülat, F10 durdur) T√ºrk√ße STT - CUDA/GPU s√ºr√ºm√º
- faster-whisper (tek seferlik model y√ºkleme; GPU √∂ncelikli)
- sounddevice ile mikrofon se√ßimi
- Hafif √∂n i≈üleme: tepe (peak) normalizasyon + opsiyonel g√ºr√ºlt√º azaltma (noisereduce)
- Kayƒ±t bitince tek seferde transkript (kƒ±sa komutlar i√ßin optimize)
- √áƒ±ktƒ±: ham ve s√∂zl√ºkle d√ºzeltilmi≈ü metin
- S√∂zl√ºk d√ºzeltici ayrƒ± dosyada: sozluk_duzeltici.py
- Opsiyonel JSON s√∂zl√ºk geni≈ületme: --lex-json terimler.json
- Memory monitoring: 8GB warning, 10GB restart

Notlar:
- T√ºm ayarlar **tek bir CONFIG** s√∂zl√ºƒü√ºnden y√∂netilir (a≈üaƒüƒ±da).
- CLI parametreleri (argparse) sadece bu CONFIG'i override eder.
- CUDA yoksa otomatik CPU/float32 fallback yapƒ±lƒ±r.
- Memory monitoring her transkripsiyon sonrasƒ± √ßalƒ±≈üƒ±r (0 performance impact)
"""

import argparse
import sys
import time
from dataclasses import dataclass
import threading
import numpy as np
import sounddevice as sd
from pynput import keyboard
import gc

from faster_whisper import WhisperModel

# S√∂zl√ºk d√ºzeltici mod√ºl√º
from sozluk_duzeltici import sozlukDuzelt2
try:
    from sozluk_duzeltici import yukle_json_ve_birlestir
except Exception:
    yukle_json_ve_birlestir = None

# Memory monitoring mod√ºl√º
from memory_monitor import MemoryMonitor, restart_program

# =============================
# CONFIG (TEK MERKEZ)
# =============================
CONFIG = {
    # Whisper / Donanƒ±m
    "modelSize": "medium",   # small / medium / large-v2 / large-v3
    "device": "cpu",          # "cuda" ya da "cpu"
    "computeType": "int8",  # GPU i√ßin "float16", CPU i√ßin "float32",CPU da hƒ±z i√ßin "int8"

    # Ses yakalama
    "targetSr": 16_000,
    "channels": 1,
    "dtype": "float32",        # sounddevice giri≈ü dtype

    # √ñn i≈üleme
    "useNoiseReduction": False, # Hƒ±zlƒ± √ßalƒ±≈ümasƒ±nƒ± istiyorsak False, √∂n i≈üleme olsun istiyorsak True.
    "nrProfileSec": 0.30, # ƒ∞lk 300 ms taban g√ºr√ºlt√º olarak kullanƒ±lƒ±r.
    "peakTarget": 0.99, # Sesin tepe deƒüerini belirli bir hedef seviyede normalize ediyor.
    
    # Memory monitoring
    "memoryWarningGB": 8.0,    # Warning threshold
    "memoryRestartGB": 10.0,   # Restart threshold
}

# √áalƒ±≈üma boyunca kullanƒ±lacak etkin konfig√ºrasyon
CFG = CONFIG.copy()

# =============================
# Global durum
# =============================
whisper_model = None
model_lock = threading.Lock()
memory_monitor = None

@dataclass
class AppState:
    recording: bool = False
    stop_requested: bool = False
    buffer: list = None
    device_index: int = None
    transcription_count: int = 0

state = AppState(recording=False, stop_requested=False, buffer=[], device_index=None, transcription_count=0)

# =============================
# Donanƒ±m / Model Yardƒ±mcƒ±larƒ±
# =============================

def check_cuda_available():
    try:
        import torch
        return torch.cuda.is_available()
    except Exception:
        return False


def resolve_device_and_compute(device: str, compute_type: str):
    """CUDA yoksa CPU/float32'ye d√º≈ü."""
    if device == "cuda" and not check_cuda_available():
        print("[Model] Uyarƒ±: CUDA bulunamadƒ± - CPU'ya fallback yapƒ±lƒ±yor.")
        device = "cpu"
        if compute_type == "float16":
            compute_type = "float32"
    return device, compute_type


def load_whisper_model(model_size: str = None, device: str = None, compute_type: str = None):
    """Tek seferlik model y√ºkleme. Parametre verilmezse CFG kullanƒ±lƒ±r."""
    global whisper_model
    if whisper_model is not None:
        return whisper_model

    ms = model_size or CFG["modelSize"]
    dev = device or CFG["device"]
    ct = compute_type or CFG["computeType"]

    dev, ct = resolve_device_and_compute(dev, ct)

    print(f"[Model] faster-whisper y√ºkleniyor -> model={ms}, device={dev}, compute_type={ct} ...")
    try:
        m = WhisperModel(ms, device=dev, compute_type=ct)
    except Exception as e:
        print(f"[Model] Hata: model y√ºklenemedi: {e}")
        print("[Model] CPU fallback deneniyor (compute_type=float32)")
        m = WhisperModel(ms, device="cpu", compute_type="float32")

    whisper_model = m
    print("[Model] ‚úÖ Model y√ºklendi ve hazƒ±r.")
    return whisper_model

# =============================
# Mikrofon listesi/Se√ßimi
# =============================

def listele_ve_sec_mikrofon() -> int:
    print("\n=== Ses Giri≈ü Aygƒ±tlarƒ± ===")
    devices = sd.query_devices()
    input_indices = []
    for idx, dev in enumerate(devices):
        if dev.get('max_input_channels', 0) > 0:
            input_indices.append(idx)
            print(f"[{idx}] {dev['name']} (in:{dev['max_input_channels']} out:{dev['max_output_channels']})")
    if not input_indices:
        print("Giri≈ü aygƒ±tƒ± bulunamadƒ±! L√ºtfen Windows ses ayarlarƒ±nƒ± kontrol edin.")
        sys.exit(1)
    while True:
        try:
            sel = int(input("\nKullanmak istediƒüiniz mikrofon index'i: "))
            if sel in input_indices:
                return sel
            else:
                print("Ge√ßersiz se√ßim. Yalnƒ±zca listelenen index'lerden birini girin.")
        except ValueError:
            print("L√ºtfen sayƒ±sal bir index girin.")

# =============================
# PTT (F9/F10) dinleyicisi
# =============================

def on_press(key):
    try:
        if key == keyboard.Key.f9 and not state.recording:
            print("\n[F9] üé§ Kayƒ±t BA≈ûLADI. [F10] ile durdurabilirsiniz‚Ä¶")
            state.recording = True
            state.stop_requested = False
            state.buffer = []
        elif key == keyboard.Key.f10 and state.recording:
            print("\n[F10] ‚èπÔ∏è Kayƒ±t DURDURULDU. ƒ∞≈üleniyor‚Ä¶")
            state.stop_requested = True
        elif key == keyboard.Key.f1:  # Memory stats i√ßin F1 ekledim
            if memory_monitor:
                memory_monitor.print_memory_stats()
    except Exception as e:
        print(f"Klavye dinleyicisi hatasƒ±: {e}")


def klavye_dinleyici_baslat():
    listener = keyboard.Listener(on_press=on_press)
    listener.daemon = True
    listener.start()
    return listener

# =============================
# √ñn i≈üleme
# =============================

def peak_normalize(x: np.ndarray) -> np.ndarray:
    peak = np.max(np.abs(x)) + 1e-12
    if peak > 0:
        gain = min(CFG["peakTarget"] / peak, 10.0)
        x = x * gain
    return x


def noise_reduce_if_needed(x: np.ndarray, sr: int) -> np.ndarray:
    if not CFG["useNoiseReduction"]:
        return x
    try:
        import noisereduce as nr
    except ImportError:
        print("[Uyarƒ±] noisereduce kurulu deƒüil, g√ºr√ºlt√º azaltma atlandƒ±.")
        return x
    n_prof = int(CFG["nrProfileSec"] * sr)
    noise_prof = x[:n_prof] if len(x) > n_prof else x
    try:
        y = nr.reduce_noise(y=x, sr=sr, y_noise=noise_prof, stationary=True)
        return y.astype(np.float32)
    except Exception as e:
        print(f"[Uyarƒ±] G√ºr√ºlt√º azaltma sƒ±rasƒ±nda hata: {e}. Atlandƒ±.")
        return x

# =============================
# Ses akƒ±≈üƒ± callback'i
# =============================

def audio_callback(indata, frames, time_info, status):
    if status:
        print(f"[SoundDevice] Durum: {status}")
    if state.recording and not state.stop_requested:
        # mono
        mono = np.mean(indata, axis=1).astype(np.float32)
        state.buffer.append(mono)

# =============================
# Memory temizliƒüi ve monitoring
# =============================

def cleanup_after_transcription():
    """Transkripsiyon sonrasƒ± memory temizliƒüi"""
    # Manuel garbage collection
    gc.collect()
    
    # CUDA memory temizliƒüi (varsa)
    if CFG["device"] == "cuda":
        try:
            import torch
            if torch.cuda.is_available():
                torch.cuda.empty_cache()
        except Exception:
            pass


def check_memory_and_restart_if_needed():
    """Memory monitoring ve gerekirse restart"""
    global memory_monitor
    
    if memory_monitor is None:
        return
    
    # Memory kontrol√º yap (0.1ms overhead)
    if memory_monitor.should_restart():
        print("\n[Memory Monitor] Critical memory usage detected!")
        print("[Memory Monitor] Restarting program...")
        
        # Cleanup before restart
        try:
            cleanup_after_transcription()
        except Exception:
            pass
        
        # Program restart
        restart_program()

# =============================
# Transkripsiyon
# =============================

def transcribe_numpy(audio_np: np.ndarray, sr: int, lex_json: str = None):
    """audio_np: float32 mono"""
    # √ñn i≈üleme
    audio_np = peak_normalize(audio_np)
    audio_np = noise_reduce_if_needed(audio_np, sr)

    # Modeli al (tek sefer y√ºklenir)
    with model_lock:
        model = load_whisper_model()

    print("[STT] ‚ö° √á√∂z√ºmleme ba≈ülƒ±yor‚Ä¶")
    segments, info = model.transcribe(audio_np, language="tr", task="transcribe") # Hƒ±zlanmasƒ± i√ßin => beam_size=1,vad_filter=True

    raw_text_parts = [seg.text for seg in segments]
    raw_text = " ".join(s.strip() for s in raw_text_parts).strip()

    corrected = sozlukDuzelt2(raw_text)

    print("\n==== SONU√á ====")
    print("Ham metin:", raw_text)
    print("D√ºzeltilmi≈ü metin:", corrected)
    print("================")
    
    # Memory temizliƒüi (segments ve info objelerini temizle)
    try:
        del segments, info, raw_text_parts
    except Exception:
        pass
    
    
    # Post-processing: Memory monitoring (0 performance impact)
    cleanup_after_transcription()
    check_memory_and_restart_if_needed()
    

# =============================
# Ana d√∂ng√º (CLI)
# =============================

def main():
    global memory_monitor
    
    parser = argparse.ArgumentParser(description="PTT T√ºrk√ße STT (faster-whisper, GPU-ready)")
    # Argparse varsayƒ±lanlarƒ±nƒ± None bƒ±rakƒ±p sadece override i√ßin kullanƒ±yoruz
    parser.add_argument('--model-size', type=str, default=None, help="Model boyutu (small/medium/large-v2/large-v3)")
    parser.add_argument('--device', type=str, default=None, help="'cuda' veya 'cpu'")
    parser.add_argument('--compute-type', type=str, default=None, help="compute_type (float16, int8, float32)")
    parser.add_argument('--lex-json', type=str, default=None, help='Opsiyonel s√∂zl√ºk JSON dosyasƒ±')
    parser.add_argument('--no-nr', action='store_true', help='G√ºr√ºlt√º azaltmayƒ± devre dƒ±≈üƒ± bƒ±rak')
    parser.add_argument('--no-memory-monitor', action='store_true', help='Memory monitoring devre dƒ±≈üƒ± bƒ±rak')
    parser.add_argument('--memory-warning', type=float, default=None, help='Memory warning threshold (GB)')
    parser.add_argument('--memory-restart', type=float, default=None, help='Memory restart threshold (GB)')
    args = parser.parse_args()

    # CONFIG override
    if args.model_size:
        CFG["modelSize"] = args.model_size
    if args.device:
        CFG["device"] = args.device
    if args.compute_type:
        CFG["computeType"] = args.compute_type
    if args.no_nr:
        CFG["useNoiseReduction"] = False
    if args.memory_warning:
        CFG["memoryWarningGB"] = args.memory_warning
    if args.memory_restart:
        CFG["memoryRestartGB"] = args.memory_restart

    # Memory Monitor ba≈ülat (opsiyonel)
    if not args.no_memory_monitor:
        try:
            memory_monitor = MemoryMonitor(
                warning_threshold_gb=CFG["memoryWarningGB"],
                restart_threshold_gb=CFG["memoryRestartGB"]
            )
        except Exception as e:
            print(f"[Memory Monitor] Hata: {e}")
            print("[Memory Monitor] Memory monitoring devre dƒ±≈üƒ± kalacak")
            memory_monitor = None

    # JSON s√∂zl√ºk varsa program ba≈üƒ±nda y√ºkle
    if args.lex_json:
        if yukle_json_ve_birlestir is None:
            print("[S√∂zl√ºk] Uyarƒ±: 'yukle_json_ve_birlestir' fonksiyonu bulunamadƒ±. sozluk_duzeltici.py s√ºr√ºm√ºn√º kontrol et.")
        else:
            try:
                yukle_json_ve_birlestir(args.lex_json)
                print(f"[S√∂zl√ºk] JSON s√∂zl√ºk y√ºklendi: {args.lex_json}")
            except Exception as e:
                print(f"[S√∂zl√ºk] JSON y√ºkleme hatasƒ±: {e}")

    # Mikrofon se√ßimi
    try:
        state.device_index = listele_ve_sec_mikrofon()
    except Exception as e:
        print(f"Mikrofon listelenemedi: {e}")
        sys.exit(1)

    # Program ba≈üƒ±nda modeli y√ºklemeyi dene (hata yakala ama devam et)
    try:
        load_whisper_model()
    except Exception as e:
        print(f"[Model Ba≈ülatma] Hata: {e}")

    # Bilgi bandosu
    eff_dev, eff_ct = resolve_device_and_compute(CFG["device"], CFG["computeType"])
    print("\n" + "="*50)
    print("‚úÖ Sƒ∞STEM HAZIR! (GPU-ready + Memory Monitor)")
    print(f"‚Ä¢ Model: {CFG['modelSize']}")
    print(f"‚Ä¢ Device/Compute: {eff_dev} / {eff_ct}")
    print(f"‚Ä¢ Audio: {CFG['targetSr']} Hz, {CFG['channels']} ch, dtype={CFG['dtype']}")
    print(f"‚Ä¢ NR: {'A√ßƒ±k' if CFG['useNoiseReduction'] else 'Kapalƒ±'} (profil {CFG['nrProfileSec']} sn)")
    if memory_monitor:
        print(f"‚Ä¢ Memory: Warning {CFG['memoryWarningGB']}GB, Restart {CFG['memoryRestartGB']}GB")
    print("üé§ [F9] ile kaydƒ± ba≈ülatƒ±n")
    print("‚èπÔ∏è  [F10] ile kayƒ±t durdurun")
    print("üìä [F1] ile memory stats")
    print("‚ùå √áƒ±kƒ±≈ü i√ßin Ctrl+C")
    print("="*50)

    klavye_dinleyici_baslat()

    try:
        with sd.InputStream(
            samplerate=CFG["targetSr"],
            channels=CFG["channels"],
            dtype=CFG["dtype"],
            device=state.device_index,
            callback=audio_callback,
            blocksize=0,
        ):
            while True:
                time.sleep(0.05)
                if state.recording and state.stop_requested:
                    audio = np.concatenate(state.buffer, axis=0).astype(np.float32) if state.buffer else np.zeros((0,), dtype=np.float32)
                    state.recording = False
                    state.stop_requested = False
                    state.buffer = []

                    if len(audio) > 0:
                        duration = len(audio) / CFG["targetSr"]
                        print(f"[Kayƒ±t] {duration:.2f} saniye ses yakalandƒ±.")
                        if duration > 0.1:  # Minimum s√ºre kontrol√º
                            transcribe_numpy(audio, CFG["targetSr"], args.lex_json)
                        else:
                            print("[Kayƒ±t] √áok kƒ±sa ses kaydƒ±, atlandƒ±.")
                    else:
                        print("[Kayƒ±t] Ses verisi yakalanmadƒ±.")
                    
                    print("\nüé§ [F9] ile yeni kayda ba≈ülayabilirsiniz...")

    except KeyboardInterrupt:
        print("\n[√áƒ±kƒ±≈ü] Program sonlandƒ±rƒ±lƒ±yor...")
    except Exception as e:
        print(f"\n[Hata] Ses akƒ±≈üƒ± hatasƒ±: {e}")
    finally:
        print("Program kapatƒ±ldƒ±.")


if __name__ == "__main__":
    main()